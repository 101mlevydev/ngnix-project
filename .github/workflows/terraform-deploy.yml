name: Terraform Deploy

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Debug Step: List the directory structure to confirm files
      - name: List Files
        run: ls -R

      # Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      # Initialize Terraform
      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      # Check and Import Resources
      - name: Check and Import Resources
        working-directory: terraform
        env:
          LOAD_BALANCER_ARN: ${{ secrets.LOAD_BALANCER_ARN }}
          TARGET_GROUP_ARN: ${{ secrets.TARGET_GROUP_ARN }}
        run: |
          # Check if Load Balancer is in the Terraform state
          if ! terraform state list | grep -q "aws_lb.nginx_alb"; then
            echo "Importing existing Load Balancer..."
            terraform import aws_lb.nginx_alb "$LOAD_BALANCER_ARN"
          else
            echo "Load Balancer already managed in Terraform state."
          fi

          # Check if Target Group is in the Terraform state
          if ! terraform state list | grep -q "aws_lb_target_group.nginx_tg"; then
            echo "Importing existing Target Group..."
            terraform import aws_lb_target_group.nginx_tg "$TARGET_GROUP_ARN"
          else
            echo "Target Group already managed in Terraform state."
          fi

      # Plan Terraform changes
      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -out=tfplan

      # Apply Terraform changes
      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve tfplan
